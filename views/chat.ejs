<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .chat-container-fullpage {
      position: relative;
      height: calc(100vh - 76px);
      margin-top: 20px;
      display: flex;
      flex-direction: column;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .chat-header-fullpage {
      padding: 15px;
      background-color: #0d6efd;
      color: white;
      border-radius: 10px 10px 0 0;
    }
    
    .chat-body-fullpage {
      flex-grow: 1;
      padding: 20px;
      overflow-y: auto;
    }
    
    .chat-footer-fullpage {
      padding: 15px;
      border-top: 1px solid #eee;
    }
    
    .message-content {
      max-width: 70%;
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <div class="row">
      <!-- Sidebar -->
      <div class="col-md-2 d-none d-md-block sidebar bg-light">
        <div class="text-center py-4">
          <h3>Audie</h3>
          <p class="text-muted">Meta-Agent AI</p>
        </div>
        <ul class="nav flex-column">
          <li class="nav-item">
            <a class="nav-link" href="/">
              <i class="bi bi-speedometer2"></i> Dashboard
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/tasks">
              <i class="bi bi-check2-square"></i> Tasks
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/estimates">
              <i class="bi bi-file-earmark-text"></i> Estimates & Invoices
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/clients">
              <i class="bi bi-people"></i> Clients
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/settings">
              <i class="bi bi-gear"></i> Settings
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/chat">
              <i class="bi bi-chat-dots"></i> Chat with Audie
            </a>
          </li>
        </ul>
      </div>
      
      <!-- Main Content -->
      <main class="col-md-10 ms-sm-auto px-md-4 main-content">
        <!-- Full Page Chat Interface -->
        <div class="chat-container-fullpage">
          <div class="chat-header-fullpage">
            <div class="d-flex align-items-center">
              <i class="bi bi-robot fs-4 me-2"></i>
              <h4 class="mb-0">Chat with Audie</h4>
            </div>
          </div>
          
          <div class="chat-body-fullpage" id="chatMessages">
            <div class="message assistant">
              <div class="message-content">
                <p>Hello! I'm Audie, your Meta-Agent. How can I help you today?</p>
              </div>
            </div>
            
            <!-- Messages will be dynamically added here -->
          </div>
          
          <div class="chat-footer-fullpage">
            <form id="messageForm">
              <div class="input-group">
                <input type="text" class="form-control" id="messageInput" placeholder="Type your message here..." autofocus>
                <button class="btn btn-primary" type="submit" id="sendMessageBtn">
                  <i class="bi bi-send"></i> Send
                </button>
              </div>
            </form>
            <div class="mt-2 text-muted small">
              <p class="mb-0">Try asking about tasks, schedules, or email updates. You can also create new tasks directly.</p>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const messageForm = document.getElementById('messageForm');
      const messageInput = document.getElementById('messageInput');
      const chatMessages = document.getElementById('chatMessages');
      
      // Send message function
      const sendMessage = async (e) => {
        e.preventDefault();
        
        const message = messageInput.value.trim();
        if (!message) return;
        
        // Add user message to chat
        addMessageToChat('user', message);
        messageInput.value = '';
        
        // Show typing indicator
        const typingIndicator = addTypingIndicator();
        
        try {
          // Send message to server (Audie)
          const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message })
          });
          
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          
          const data = await response.json();
          
          // Remove typing indicator
          typingIndicator.remove();
          
          // Add assistant response to chat
          addMessageToChat('assistant', data.message);
        } catch (error) {
          console.error('Error sending message:', error);
          typingIndicator.remove();
          addMessageToChat('assistant', 'Sorry, I encountered an error processing your request.');
        }
      };
      
      // Add message to chat
      const addMessageToChat = (sender, message) => {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', sender, 'mb-4');
        
        const messageContent = document.createElement('div');
        messageContent.classList.add('message-content');
        
        // Process message text (could contain markdown or newlines)
        const formattedMessage = message.replace(/\n/g, '<br>');
        messageContent.innerHTML = `<p>${formattedMessage}</p>`;
        
        messageElement.appendChild(messageContent);
        chatMessages.appendChild(messageElement);
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
      };
      
      // Add typing indicator
      const addTypingIndicator = () => {
        const typingElement = document.createElement('div');
        typingElement.classList.add('message', 'assistant', 'typing-indicator', 'mb-4');
        
        const typingContent = document.createElement('div');
        typingContent.classList.add('message-content');
        typingContent.innerHTML = `
          <div class="typing">
            <span></span>
            <span></span>
            <span></span>
          </div>
        `;
        
        typingElement.appendChild(typingContent);
        chatMessages.appendChild(typingElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        return typingElement;
      };
      
      // Event listeners
      messageForm.addEventListener('submit', sendMessage);
    });
  </script>
</body>
</html> 